.....................................................................................
			   Spring Framework && Spring Boot
.....................................................................................

What is Spring Framework?

  Spring is Java Framework to build "enterprise distributed application"

Types of application:
.....................

=>Desktop application
   Desk apps built for standalone desktops eg ..notpad,word,excel

=>Network based application
   Apps runs in the remote machine and accessed that apps via network.

 =>Client Server Arch
	Application has three major layer(tier)
    ->Data Layer -Where we store data
    ->Biz layer - Where we process data
    ->Presentation Layer - Where we present  data

History of client and server:

->Mainframe based arch : The first network based application
->Layered Client server arch without mainframeworks

  ->Single/One tier client server - >Both storage and biz processing kept in single 				      machine,where as ui layer is kept separately.

  ->Two/tier client server
        Database/Storage layer is separated, biz processing layer is kept in one 	      machine, and ui also kept in the same machine.

  ->Three tier client server 
	Data layer , Biz processing layer, Ui layer is kept in different machines

  ->N-tier client server 
      Data Layer
      Biz processing layer
	->MOM Layer - Message oriented middlware -
        ->Rpc layer - Remote Procedure call-app to app interaction.
        ->Integration layer - ESB (Enterprise Service Bus)
    Each layer can be kept in different and different machines , each layer can communicate over network using its own networking protocals


How to build distributed apps?
   You can build distributed applications in any technology like "java",".netnet",php,python,node.js,.....


Distributed application types:
..............................
Now a days distributed apps are built using various patterns.

1.Monolithic Architecture pattern
    Legacy way of building "distributed apps"
2.Microservice Architecture pattern
    Modern way of building "distributed apps"


         Since Spring is Distribtued java App framework
	   We can build "Mononlolithic" and also we can 
	    build "Microservices" based apps.

			Spring
			  |
	  ------------------------------------------------
          |                                              |
    Monolothic                                     Microserivces

As a java developer, I need to know what are the concepts available to start 
building Monololithic apps in Spring.

1.Spring core Framework & Boot
2.Spring Data 
3.Api Development using webservices - Rest / Soap
4.Integration /MOM using Rabbitmq or Kafka....


As a java developer, I need to know what are the concepts available to start 
building Microservices apps in Spring.


1.Spring core Framework & Boot
2.Spring Data 
3.Api Development using webservices - Rest / Soap
4.Integration /MOM using Rabbitmq or Kafka....
5."Spring Cloud"- framework which provides all infrastructure
  to build Microservices based distributed apps.
6.Dev ops
7.Cloud Technologies

....................................................................................
			 History Of Spring Framework
....................................................................................

Early 2000,Java become very popular for building distributed Applications.

Java Technology Types:

1.JSE 
   -Core java programming language
2.JEE
  -Building distributed apps 
3.JME
  -Device apps like mobile
...................................................
JCP - Java Community Process
 Who standarize the entire Java Technology.

Java works based on Specification,
   Rules and regualations how things are working.

JSE - How java programming language works
JVM - How Java vm can be implementated.

....................................................................................
                             JEE -Enterprise Specification
.....................................................................................

JEE Platform spec : containers /app containers/tools

1.Web Technology spec
 Java servlet
 JSP
 JSF
 Websocket
 JSTL
 EL
2.Enterprise Application spec
EJB
JPA -ORM
JMS
JTA
DI
Context and DI
Concurrency Util

3.Web Services

SOAP based  -JAX-WS
REST Based  -JAX-RS

4.Management and Security technologies
........................................
Java EE Security spec
Java Auth
Java authorzation
JAVA EE additional spec
JMX -Jmeter

...................................................................................
		   Complixty of JEE Spec and implementation
.....................................................................................

JEE enterprise/distributed application:
......................................

Client Layer         Web Layer      Biz layer      Data Layer/Persistency

Browser             Servlet/JSP      EJB               EJB - Entity Beans


EJB :Enterprise Java Bean
  Java Object(bean) can support distributed biz operations
eg: incase of shopping cart
  I have a bean(java object) which has three apis addToCart,Checkout,Payment

Api classifications:
1.Session Bean  - to represent biz logic---jdbc--dml
2.Enitity bean  -ORM - Object to Table mapping-First orm solution---Hibernate
3.Message Driven Bean - Message driven systems-RabbitMQ,JMS

Rod johnson  was working in enterprise banking application with jee, he faced lot of 
complexity in designing ejb driven systems, so he decided to move out ejb from JEE application, he wrote book called expert  J2EE Development without EJB.


He proposed a model  that model later on came as The project in "Spring Season" - Spring Framework.

Client Layer         Web Layer      Biz layer               Data Layer/Persistency

Browser             Spring MVC     Spring Services          Spring-orm - Spring-								    data

Spring development objective is "POJO". (Plain Old Java Object)

When you build enterprise java apps, no plumbing(bolier plate code),Spring framework takes care that plumbing.

Java is Object Oriented Programming language.

Apps built on java collection of objects.

Object Oriented Principles:
...........................

1.Abstraction
2.Encapsulation
3.Hierarchy
4.Typing
5.Modularity
----------------------
6.Concurrency
7.Persistency
.....................................................................................
   		  1.Object Management :Hierarchy
.....................................................................................

Object Relationship

-HAS-A -  Composition
-IS-A - Inheritance

Enterprise application challanges:

1.Object Management

class Order {
   Product product
}

class Customer{
   Order order
}

class Product {
  Item item
}
class Item {

}

Customer information
 ->Order
     -Product
        -Item

You have to create Object for every class
You have to pass object reference to every Object - HAS-A

new Customer(new Order(new Item()))
...................................................................................
			IOC : Inversion of Control
....................................................................................
In enterprise application object creation and linking objects are so complex that should be removed from the developer.

Someone should take care object creation and linking= 
  =>This process is called as IOC.
The IOC suggest the automation program,that program called as IOC Container.

Management - creating object and mainitain its relationship references
		-developer via code

Do Opposit - Dont create object , dont management object life cycle
   IOC
Some body has to create objects and manage its relationship - "Automated Program"
   -IOC Container

ioc container implementation:
 -Spring framework provides at core ioc container - Spring Context


Spring framework is "java Application" which is used to build java distributed app.
Spring takes care of creating "objects and links those objects" -IOC Container.

....................................................................................
.....................................................................................
			Spring Application
.....................................................................................
   The application is written in java technology, executed on Spring Container which is runtime for spring applications.spring container runs on jvm


			  Spring Application
				 |
			   Spring Container
				 |
				JVM

What is framework?
   One Stop Solution
 Collection of tools and technologies provided in one place to build end to end applications mostly.
  
  
What spring framework offers?

 Spring offers collection of many projects.

1.Core:
IoC container,
Events, 
Resources, 
i18n,
Validation,
Data Binding,
Type Conversion, 
SpEL,
AOP.

2.Spring MVC
3.Spring cloud
etc....
https://spring.io/projects/

....................................................................................
				Spring Core principle
.....................................................................................

Make Java enterprise distributed application easy way.

=>IOC and Dependency Injection
     -How to create objects and how to link objects.



Spring Provides

1.Application code
   classes which expose biz logic and apis - written by developer

2.Infrastructure code - provided by framework
  creating objects
  initalization dependencies

Spring takes care of infra code, as where developer takes care of app code.

Object Creation In spring:
.........................
 In Spring Object creation and linking objects must be separated from the developer
 	-IOC and DI


For implementing IOC and DI, spring offers three technique

Spring is based on Configurtion:

Three types of configuration:

1.XML driven - old way of configuration
2.Java Config Driven - after xml
3.Boot Driven - highly automated configuration system.

We are going to see all types of configuration...


.....................................................................................
				   Tools For Spring Application Development
....................................................................................

Spring Versions and features

2004 - Spring Framework 1.0 released
– Champions dependency injection
– Encourages POJOs
– Uses XML files to describe application
  configuration
– Becomes popular quickly alternate to an EJB

• Spring 2.0 (2006):
 – XML simplification, async JMS, JPA, AspectJ support

• Spring 2.5 (2007, last release 2.5.6)
  – Requires Java 1.4+ and supports JUnit 4
  – Annotation DI, @MVC controllers, XML namespaces

• Spring 3.x (3.2.17 released July 2013)

   – Environment & Profiles, @Cacheable, @EnableXXX …
   – Requires Java 1.5+ and JUnit 4.7+
   – REST support, JavaConfig, SpEL, more annotations

• Spring 4.x (released Dec 2016)
    – Support for Java 8, @Conditional, Web-sockets
....................................................................................

• Spring 5.x (2017) - Spring Boot
  MicroService driven Dev features
   – Reactive programming focus
   - Functional Programming
   - Cloud Functionality
   - Container support

• Spring 6.x (2023)
   -Java 11 and 17 LTS support
   -Only improvments and bug fixing

Spring Boot:
  Springboot was available inside Spring Framework 5.x 
  later it became independant project
  Now days only Spring boot is defacto standard for configuring spring applications
  
  Spring boot 3.1 is new Spring Boot Release

...................................................................................
				Spring Core Concepts
....................................................................................

Spring Core Concepts:

1.Spring Bean

What is Bean?
   
  Bean is terminallogy coined by SUN Micro System to name java object.

Object vs Bean?

 -Same but Bean has some special characteristics  which was proposed by SUN micro system via "Java Bean Spec".

It is java class, based Java Bean standards
 	-class should be public
 	-properties should be private
 	-set and get methods - Accessors and mutators
	-constructors

Why Bean Spec?
  - in order to standarize the java dev process- Coding Standards.

public class Customer {
  private  int id;
  private String name;
}
    "Spring  follows java bean spec in order to create object and links objects"


class CustomerService {

   private CustomerRespository rep;

   CustomerService(){

   }
   set /get

}
class CustomerRespository{


}

Spring Bean is Java Object follows Bean Specification and also managed by Spring Container.

....................................................................................			  	 Spring Bean Creation(Object)
.....................................................................................


Who creates Spring Beans?

 -Spring Container

 Spring container is java object, which manages object(bean) life cycle like   create,use,destroy.

How spring beans are created?

-> you must have bean definitions outside application biz logic
-> sp container reads that bean definitions, initalizes the beans.


Architecture:

			POJO Classes(Bean)
				 |
    Spring-Application <====>SpringContainer
      config file		 |
		       Fullyconfigured System


Spring Bean Definitions(file) instructs Spring Container how to create objects(order of creations) and how to link (DI) objects

....................................................................................
			Spring Application Configuration Management
.....................................................................................
Spring Application can be configured in many ways

1.XML files  -  Old and Legacy.

2.Java Config + Annotations -Modern way

  2.1 Java Config -Manual - Write Configuration and logic

   Here Dev need to write Configuration and biz logic , which makes app dev slower.

Just Focus logic, automate configuration itself - AutoConfig

3.AutoConfig:
    Framework must take care of configuration based on various conditions like
 i want web and jpa , messaging.
                        "Birth of Spring Boot"
....................................................................................
				Spring Project Setup 
	    

What are the required components to setup Spring Project.

1.IDE,mvn,java

2.Project layout

Spring Project requires

Infra Structure:
 1.Project libraries
 2.Project Configurations

Application Structure

1.Application code
2.assets - imgs,docs
3.App Configuration

mvn or gradle

.............................................................................................
				    Spring Project Creations
.....................................................................................

Whether you build app using Boot or Old Spring Framework Two things you have to take care

1.Project Dependency -  Libraries- core,web,data,cloud,logger....
  You have to manage
  Spring have to manage - Boot via starters

2.Application Configuration
   -Bean defintions -  xml, or javaconfig- manual/auto(spring boot)

Spring Project Using Spring Framework method:
.............................................

XML based project:
.................


Steps:

1.create Plain Maven Project and spring dependency.


2.pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>springcore</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <dependencies>
        <!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>6.1.9</version>
        </dependency>
    </dependencies>

</project>

....................................................................................
			 Object creations without spring
.....................................................................................

Declare Bean:
package com.ibm.spring.core.beans;

public class Customer {
    private int id;
    private String name;

    public Customer() {
    }

    public Customer(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

Declare Main class and Create Object;
.....................................

package com.ibm.spring.core.beans;

public class ObjectCreationWithoutSpring {
    public static void main(String[] args) {
        //create object
        Customer customer = new Customer();
        //populate data : via setters
        customer.setId(1);
        customer.setName("Subramanian Murugan");

        //read Data : via getters
        System.out.println(customer.getId() + " " + customer.getName());

        //via constructor how to initialize object
        customer = new Customer(2, "Murugan");
        System.out.println(customer.getId() + " " + customer.getName());

    }
}

here 
=> we create objects
=> we popuplate data via setters and constructors.
.....................................................................................

package com.ibm.spring.core.beans;

public class GreeterService {

    public String sayHello(){
        return "Hello";
    }
}
package com.ibm.spring.core.beans;

public class ObjectCreationWithoutSpring {
    public static void main(String[] args) {
        GreeterService greeterService = new GreeterService();
        System.out.println(greeterService.sayHello());
    }
}
.....................................................................................
			 Spring and Object Creation
..................................................................................

In order to create object by spring, we need a configuration system.

1.XML based configuration- very very old-nobody is using today, but which is foundation for modern spring configuration(auto-spring boot)

2.java config - new way of configuration used today- auto config.


XML based configuration:
1.config xml

place beans.xml in the class path - resources/beans.xml

Template:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


</beans>
....................................................................................

src/resources/beans.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--    Bean definition-->
    <bean id="greeterService" class="com.ibm.spring.core.beans.GreeterService"/>

</beans>
package com.ibm.spring.core.beans.xml;

import com.ibm.spring.core.beans.GreeterService;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class GreeterSpringBean {
    public static void main(String[] args) {
        //initialize the spring container by reading beans.xml file
        ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
        //Beans are created already by spring container, get the bean from the container
        GreeterService greeterService = context.getBean(GreeterService.class);
        //Use the bean
        System.out.println(greeterService.sayHello());

    }
}
...........

beans.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

   <bean id="customer" class="com.ibm.spring.core.beans.Customer">

   </bean>

</beans>

create customer object

Object creation and get properties

package com.ibm.spring.core.beans.xml;

import com.ibm.spring.core.beans.Customer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class CustomerSpringBean {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
        Customer customer = context.getBean(Customer.class);
        customer.setId(1);
        customer.setName("Subramanian");
        System.out.println(customer.getId() + customer.getName());

    }
}
.....................................................................................
		 How to initalize the properties inside beans.xml

...................................................................................
			 Depedency Injection


What is dependency Injection?

  Linking objects
  Setting Object Property values
  Setting Object references with Object who refers it.

Dependency Injection on reference types and Primitives.

class Customer {
   private int id - primtive - Dependency
   private Order order - Reference type - Dependency
}


Types of DI:
1.Setter
    Linking objects and properties after objects created
2.Constructor
    Linking objects, During object creation.
3.Field Injection
   Linking objects after Creation



Setter Injection
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="customer" class="com.ibm.spring.core.beans.Customer">
        <!--      setter injection-->
        <property name="id" value="10"/>
        <property name="name" value="Subramanian Murugan"/>
    </bean>

</beans>


package com.ibm.spring.core.beans.xml;

import com.ibm.spring.core.beans.Customer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class CustomerSpringBean {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
        Customer customer = context.getBean(Customer.class);
        System.out.println(customer);

    }
}
.....................................................................................

Constructor injection:

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="greeterService" class="com.ibm.spring.core.beans.Customer">
        <constructor-arg name="id" value="13"/>
        <constructor-arg name="name" value="Subramanian Murugan"/>
    </bean>

</beans>
package com.ibm.spring.core.beans.xml;

import com.ibm.spring.core.beans.Customer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class CustomerSpringBean {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
        Customer customer = context.getBean(Customer.class);
        System.out.println(customer);

    }
}
When to use Setter vs Constructor?

Note: 
 Constructor properties are initlized during object creations
 Settter properties are initlized after object creations

Spring supports both.You can mix and match.


Constructors:
  ->Enforce mandatory dependencies

Setters:
 1.Allow optional dependenices


Setter and constructor injections can be done with primtive data types and reference types

.....................................................................................

Reference Type:
 both setter and constructor injections

beans.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="product" class="com.ibm.spring.core.beans.xml.reference.Product">
        <constructor-arg name="productId" value="1"/>
        <constructor-arg name="name" value="Phone"/>
    </bean>
<!--    <bean id="order" class="com.ibm.spring.core.beans.xml.reference.Order">-->
<!--        &lt;!&ndash;        constructor injection &ndash;&gt;-->
<!--        <constructor-arg name="orderId" value="1000"/>-->
<!--        <constructor-arg name="ordervalue" value="2345.683434"/>-->
<!--        <constructor-arg name="product" ref="product"/>-->

<!--    </bean>-->

    <bean id="order" class="com.ibm.spring.core.beans.xml.reference.Order">
        <!--        setter injection -->
        <property name="orderId" value="1000"/>
        <property name="ordervalue" value="2345.683434"/>
        <property name="product" ref="product"/>

    </bean>


</beans>

package com.ibm.spring.core.beans.xml.reference;

public class Order {
    private int orderId;
    private double ordervalue;

    private Product product ;

    @Override
    public String toString() {
        return "Order{" +
                "orderId=" + orderId +
                ", ordervalue=" + ordervalue +
                ", product=" + product +
                '}';
    }

    public Order(int orderId, double ordervalue, Product product) {
        this.orderId = orderId;
        this.ordervalue = ordervalue;
        this.product = product;
    }

    public Order() {
    }

    public int getOrderId() {
        return orderId;
    }

    public void setOrderId(int orderId) {
        this.orderId = orderId;
    }

    public double getOrdervalue() {
        return ordervalue;
    }

    public void setOrdervalue(double ordervalue) {
        this.ordervalue = ordervalue;
    }

    public Product getProduct() {
        return product;
    }

    public void setProduct(Product product) {
        this.product = product;
    }
}
package com.ibm.spring.core.beans.xml.reference;

public class Product {

    private  int productId;
    private String name;

    public Product() {
    }

    public Product(int productId, String name) {
        this.productId = productId;
        this.name = name;
    }

    public int getProductId() {
        return productId;
    }

    public void setProductId(int productId) {
        this.productId = productId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
    public String toString() {
        return "Product{" +
                "productId=" + productId +
                ", name='" + name + '\'' +
                '}';
    }
}


package com.ibm.spring.core.beans.xml.reference;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class ReferenceTypeInjection {
    public static void main(String[] args) {

        ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
        Order order=context.getBean(Order.class);
        System.out.println(order);

    }
}

.....................................................................................
				Dependency Injection values

1.You can inject primitives values- int,float,string,char,boolean
2.You can inject objects -Customer ,Address
3.You can inject list - Collections,Map,List,Set
.....................................................................................	

Assigment -1:

Create Subject and Instructor Objects accorindly , populate data accordingly using setter and constructor injection...
.....................................................................................
			    Interface based dependency


1.Declare interface

package com.ibm.spring.core.di.interfaces;

import java.util.List;

public interface Repository {
    List<String> listAll();
}

2.Implementations

package com.ibm.spring.core.di.interfaces;

import java.util.List;

public class SQLRepositoryImpl implements Repository {
    @Override
    public List<String> listAll() {
        return List.of("CREATE", "UPDATE", "DELETE", "SELECT");
    }
}

package com.ibm.spring.core.di.interfaces;

import java.util.List;

public class NOSQLRepositoryImpl implements Repository {
    @Override
    public List<String> listAll() {
        return List.of("SET", "GET");
    }
}

Injector class:
package com.ibm.spring.core.di.interfaces;

public class CustomerDAO {
    private Repository repository;

    public CustomerDAO() {
    }

    public CustomerDAO(Repository repository) {
        this.repository = repository;
    }

    public Repository getRepository() {
        return repository;
    }

    public void setRepository(Repository repository) {
        this.repository = repository;
    }
}


<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--     Create all Interface implementations-->

    <bean id="sql" class="com.ibm.spring.core.di.interfaces.SQLRepositoryImpl"/>
    <bean id="nosql" class="com.ibm.spring.core.di.interfaces.NOSQLRepositoryImpl"/>

    <bean id="customerDAO" class="com.ibm.spring.core.di.interfaces.CustomerDAO">
        <!--        <constructor-arg name="repository" ref="nosql"/>-->
        <constructor-arg name="repository" ref="sql"/>
    </bean>


</beans>
Main:
package com.ibm.spring.core.di.interfaces;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class InterfaceMain {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("beans-interface-di.xml");
        CustomerDAO customerDAO = context.getBean(CustomerDAO.class);
        System.out.println(customerDAO.getRepository().listAll());

    }
}
.....................................................................................
Bean Definitions:

1.How to create bean 
   class,factory-method

2.How to name beans?
   id,name,alias

3.scope of the beans? : visibility of the bean
   singleton,prototype,
   request,session,application,websocket

4.Dependence Injections
   constructor
   setter
   autowire

5.Lazy initialization mode
 controlling bean creations
  eagar-default
  lazy-ondemand
  lazy-init="true"

5.How to simplify bean injections? 
   Autowiring mode 
 no,byName,byType,constructor  

.....................................................................................
					Bean Creation
.....................................................................................

1.Via class  
   Spring creates using new Operator
     new Order()
  <bean id="order" class="com.ibm.spring.core.Order"/>

2.Via Factory Pattern
 -if constructor marked private
    via factory factory api.


constructor pattern:
   <bean id="customerDAO" class="com.ibm.spring.core.beans.xml.interfaces.CustomerDAO">
        <constructor-arg name="repository" ref="nosql"/>
    </bean>

Factory Pattern:
................

beans.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--    create bean via factory-->
    <bean id="userService" class="com.ibm.spring.core.beans.xml.factory.UserService" factory-method="getInstance"/>


</beans>

package com.ibm.spring.core.beans.xml.factory;

public class UserService {

    private UserService() {

    }

    public String getUserInfo() {
        return "User info";
    }

    public static UserService getInstance() {
        return new UserService();
    }
}

package com.ibm.spring.core.beans.xml.factory;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class FactoryMain {
    public static void main(String[] args) {
        //UserService userService =new UserService();
//        UserService userService = UserService.getInstance();
//        System.out.println(userService.getUserInfo());

        ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
        UserService userService = context.getBean(UserService.class);
        System.out.println(userService.getUserInfo());

    }
}
.....................................................................................
			 Bean Scopes
.....................................................................................
Generally, you can create multiple instance from bean definition.
  some times if you want to control that bean creation
you can use bean creation scope.

Spring supports 6 scopes:
 singleton,prototype - core scope
 request,session,application,websocket - Belongs to Web Application

1.Singleton
 (Default) Scopes a single bean definition to a single object instance for each Spring IoC container.
 if you call getBean no of time, spring returns the only one instance at any point of time.
This is default scope.

beans.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--    create bean via factory-->
    <bean id="helloService" class="com.ibm.spring.core.beans.xml.scopes.HelloService"/>



</beans>

package com.ibm.spring.core.beans.xml.scopes;

public class HelloService {

    public String sayHello() {
        return "Hello";
    }
}

package com.ibm.spring.core.beans.xml.scopes;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class SingleTonMain {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
        //getBean returns new Instance
        HelloService helloService1 = context.getBean(HelloService.class);
        System.out.println("helloService1 " + helloService1.hashCode());
        HelloService helloService2 = context.getBean(HelloService.class);
        System.out.println("helloService2 " + helloService2.hashCode());
        HelloService helloService3 = context.getBean(HelloService.class);
        System.out.println("helloService3 " + helloService3.hashCode());


    }
}

outPut:
helloService1 1088872417
helloService2 1088872417
helloService3 1088872417

here you can note down, the same hashcode value for n- number of getBean call.
that means we have only one instance -single Ton.
.....................................................................................
2.prototype:
a new bean instance is created every time a request for that specific bean is made 
that is, the bean is injected into another bean or you request it through a getBean() method call on the container.

beans.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--    create bean via factory-->
    <bean id="helloService" class="com.ibm.spring.core.beans.xml.scopes.HelloService" scope="prototype"/>



</beans>
package com.ibm.spring.core.beans.xml.scopes;


import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class ProtoTypeMain {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
        //getBean returns new Instance
        HelloService helloService1 = context.getBean(HelloService.class);
        System.out.println("helloService1 " + helloService1.hashCode());
        HelloService helloService2 = context.getBean(HelloService.class);
        System.out.println("helloService2 " + helloService2.hashCode());
        HelloService helloService3 = context.getBean(HelloService.class);
        System.out.println("helloService3 " + helloService3.hashCode());


    }
}

output:
helloService1 1173643169
helloService2 1436664465
helloService3 558187323

here you can see different hashcode values, so that we can understand we have different beans.
.....................................................................................
			     Automations

How to gradually reduce configurations from the xml, so that spring takes care internally, we can reduce developer job with related to focusing on configuration...

DI automations:

Dependency Injections:
 ->property - setter injections
 ->constructor-arg ref ->constructor injections

->autowire 
Which is not new injection type, but it simplifies property and constructor injections

     no ->Explicit via property or constructor-arg
     byName - Implicit via property
     byType - Implicit via type + property
     constructor - Implicit via constructor

autowire="no | byName | byType | constructor"

Lab:
 Customer
     |
     Address ----auto wire

Without auto wire:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="order" class="com.ibm.spring.core.beans.xml.autowire.Order">
        <property name="orderId" value="100"/>
        <property name="orderValue" value="2232323"/>
    </bean>
    <bean id="customer" class="com.ibm.spring.core.beans.xml.autowire.Customer">
        <property name="id" value="999"/>
        <property name="name" value="Subramaian"/>
        <!--        Without Autowire-->
        <property name="order" ref="order"/>
    </bean>


</beans>
package com.ibm.spring.core.beans.xml.autowire;

public class Order {
    private int orderId;
    private double orderValue;

    public Order() {
    }

    public Order(int orderId, double orderValue) {
        this.orderId = orderId;
        this.orderValue = orderValue;
    }

    @Override
    public String toString() {
        return "Order{" +
                "orderId=" + orderId +
                ", orderValue=" + orderValue +
                '}';
    }

    public int getOrderId() {
        return orderId;
    }

    public void setOrderId(int orderId) {
        this.orderId = orderId;
    }

    public double getOrderValue() {
        return orderValue;
    }

    public void setOrderValue(double orderValue) {
        this.orderValue = orderValue;
    }
}
package com.ibm.spring.core.beans.xml.autowire;

public class Customer {
    private int id;
    private String name;
    private Order order;

    public Customer() {
    }

    public Customer(int id, String name, Order order) {
        this.id = id;
        this.name = name;
        this.order = order;
    }

    public int getId() {
        return id;
    }

    @Override
    public String toString() {
        return "Customer{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", order=" + order +
                '}';
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Order getOrder() {
        return order;
    }

    public void setOrder(Order order) {
        this.order = order;
    }
}
package com.ibm.spring.core.beans.xml.autowire;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class AutoWireMain {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
        Customer customer = context.getBean(Customer.class);
        System.out.println(customer);

    }
}
......................

With AutoWire:
..............

Note:
 we need to add single arg constructor which must take Order as arg.

package com.ibm.spring.core.beans.xml.autowire;

public class Customer {
    private int id;
    private String name;
    private Order order;

    public Customer() {
    }

    public Customer(Order order) {
        this.order = order;
    }

    public Customer(int id, String name, Order order) {
        this.id = id;
        this.name = name;
        this.order = order;
    }

    public int getId() {
        return id;
    }

    @Override
    public String toString() {
        return "Customer{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", order=" + order +
                '}';
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Order getOrder() {
        return order;
    }

    public void setOrder(Order order) {
        this.order = order;
    }
}

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="order" class="com.ibm.spring.core.beans.xml.autowire.Order">
        <property name="orderId" value="100"/>
        <property name="orderValue" value="2232323"/>
    </bean>
    <!--    <bean id="customer" class="com.ibm.spring.core.beans.xml.autowire.Customer">-->
    <!--        <property name="id" value="999"/>-->
    <!--        <property name="name" value="Subramaian"/>-->
    <!--        &lt;!&ndash;        Without Autowire&ndash;&gt;-->
    <!--        <property name="order" ref="order"/>-->
    <!--    </bean>-->

    <!--    autowrire using setters : byType or byName -->
    <!--    <bean id="customer" class="com.ibm.spring.core.beans.xml.autowire.Customer" autowire="byType">-->
    <!--        <property name="id" value="999"/>-->
    <!--        <property name="name" value="Subramaian"/>-->
    <!--    </bean>-->
    <!--    autowrire using constructor : constructor -->

    <bean id="customer" class="com.ibm.spring.core.beans.xml.autowire.Customer" autowire="constructor">
        <property name="id" value="999"/>
        <property name="name" value="Subramaian"/>
    </bean>

</beans>
.....................................................................................
			   Bean Life cycles
....................................................................................

init
destroy

Points:
1.if you want to initalize the resources,
 Resources:
   Resource is nothing but ,something outside jvm
    ex: FileSystem,Databases,Network sockets,Graphics context....
  Resources must be mananaged properly , if not , it will give you
 memory leaks.

In general , resources are initialized inside Class constructors
eg:Establishing database,socket connections, create file points,open file

According to spring best practices, dont do it inside constructor
 Why
   WHich hindrences the bean intialization, which will drop app startup performance.

then where can i initlaize
 spring provides life cycle hooks

   ->init-method="initmethod"
   ->destroy-method="destroymethod" - Resources clean up


beans.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="database" class="com.ibm.spring.core.beans.xml.lifecycles.DatabaseConnection" init-method="init"
          destroy-method="destroy"/>

</beans>

package com.ibm.spring.core.beans.xml.lifecycles;

public class DatabaseConnection {

    public void init() {
        System.out.println("Database is being initalized");
    }

    public void destroy() {
        System.out.println("Database is being destroyed");
    }
}

package com.ibm.spring.core.beans.xml.lifecycles;

import org.springframework.context.ApplicationContext;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class LifeCycleMain {
    public static void main(String[] args) {
//        ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
//        context.getBean(DatabaseConnection.class);
        ConfigurableApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
        context.getBean(DatabaseConnection.class);
        context.registerShutdownHook();
    }
}
.....................................................................................
			 Container Extensions Points
.....................................................................................

Typically, an application developer does not need to subclass  ApplicationContext implementation classes.

 Instead, the Spring IoC container can be extended by plugging in implementations of special integration interfaces. 


Spring core System:

		  Spring Application
			|	
 	     Configuration Management System
		 (tools-XML,Annotations)
		-------------------------
		|			|
		| Spring IOC Container  |
		------------------------
			|
		       JVM


How to add extensions(plugins) on to the Existing Spring Container?


 		 Spring Application
			|	
 	    Configuration Management System
		 (tools-XML,Annotations)
		-------------------------
		|			|--->Extensions
					|    1.BeanPostProcessor 
		|			|     etc...
		|			|
		| 			|
		| Spring IOC Container  |
		|			|
		|			|	
		|			|
		|		        |
		------------------------
			|
		       JVM

1.BeanPostProcessor 

1.How to instrument beans
2.How to instrument containers


BeanPostProcessor: Extensions
..................
  BeanPostProcessor are classes that tells Spring what should be done after beans are created.

package com.ibm.spring.core.beans.xml.extensions;

import org.springframework.beans.BeansException;
import org.springframework.beans.factory.config.BeanPostProcessor;

public class BeanPostProcessorExtension implements BeanPostProcessor {
    @Override
    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {

        System.out.println("postProcessBeforeInitialization : " + beanName + " " + bean.hashCode());
        return bean;
    }

    @Override
    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
        System.out.println("postProcessAfterInitialization : " + beanName);
        return bean;
    }
}

beans.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="postProcessor" class="com.ibm.spring.core.beans.xml.extensions.BeanPostProcessorExtension"/>
    <bean id="hello" class="com.ibm.spring.core.beans.xml.extensions.HelloService"/>
</beans>

package com.ibm.spring.core.beans.xml.extensions;

public class HelloService {

    public String sayHello(){
        return "Hello";
    }
}
package com.ibm.spring.core.beans.xml.extensions;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class BeanPostProcessorMain {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
        HelloService hello = context.getBean(HelloService.class);
    }
}

.....................................................................................
         	     More Container Features(extensions)
.....................................................................................

               Spring Application
			|	
 	    Configuration Management System
		 (tools-XML,Annotations)
		-------------------------
		|			|--->Extensions
					|    1.BeanPostProcessor 
		|			|    2.Features2
		|			|    3.Feature3
		| 			|    4.FeatureN
		| Spring IOC Container  |
		|			|
		|			|	
		|			|
		|		        |
		------------------------
			|
		       JVM

Spring provides lot of built in extensions.


PropertyPlaceholderConfigurer :
   It is used to externalize the bean property values
eg:

Spring provides lot of built in extensions.

PropertyPlaceholderConfigurer :
   It is used to externalize the bean property values
eg:

Bean definition file:
  <bean id="customer" class="com.ibm.spring.core.di.Customer">
        <property name="id" value="0"/>
       
  </bean>

Property value is hardcoded, if want to isloate into some other place.

with PropertyPlaceHolder = ${propertyKey} =>PropertyValue

  <bean id="customer" class="com.ibm.spring.core.di.Customer">
        <property name="id" value="${customer.id}"/>
     
  </bean>

PropertyPlaceholderConfigurer

classpath: resources/application.properties

customer.id=1
customer.name=Subramanian Murugan

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--    In order to read property file-->
    <!--    PropertyPlaceholder extension-->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations" value="classpath:application.properties"/>
    </bean>
    <bean id="customer" class="com.ibm.spring.core.beans.extensions.Customer">
        <property name="id" value="${customer.id}"/>
        <property name="name" value="${customer.name}"/>
    </bean>
</beans>

How to read Property Values:

package com.ibm.spring.core.beans.extensions;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class PropertyPlaceHolder {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml-extensions.config.xml");
        Customer customer = context.getBean(Customer.class);
        System.out.println(customer.getId() + " " + customer.getName());
    }
}
......................................................................................
....................................................................................
	  How to introduce Annotations -Annotation Driven configuration
.....................................................................................
Annotations:
 Meta Information about class,methods,fields.

Why Annotation?
 Annotations help to inject "boiler plate code" -The code which is not neccessary for the dev but necessary for compiler,build tools,document generation tools,runtime.

Spring Introduced Annoations to simplify the lot of code generations.

Types of Spring Annotations

1.Spring Properity annotations
2.JSR 250 Annotations 


How to introduce Annotations inside Spring?
 
 Via ContainerExtension Mechanism

Common Annotations:
1.RequiredAnnotationBeanPostProcessor - @Required
2.AutowiredAnnotationBeanPostProcessor  -@Autowired
3.CommonAnnotationBeanPostProcessor  -@Common
4.PersistenceAnnotationBeanPostProcessor -@Entity
etc....

Steps to integrate Annotations:

1.Activate The Annoation via ContainerExtension Point Beans

beans.xml

 <bean class="org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor"/>
 -@Required

 -@Autowried
<bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/>

What if any one of the AnnotationBeanPostProcessor has its own dependency, we need to inject That as well, other wise it will throw error.


what if i want to use more annotations, i need to add more AnnotationBeanPostProcessor beans in bean.xml
  This is very complex

Note: modern spring has implicitly added annoation post bean processors , so you dont need to add "Core Annotation BeanPostProcessor in beans.xml".

.....................................................................................
			Automation - Annoation Scanner
.....................................................................................

Spring added feature called automated scanner, which scans all annoations from the build path/class path, creates all the beans related to annotationBeanPostProcessor


How to tell spring container to scan annotations?

We need to add new xml namespace feature, through which spring attaches all annotation.

beans.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">
    <!--    Tell to spring to scan all annotations; you dont need to configure each annotation Bean postprocessor-->
    <context:annotation-config/>
</beans>

Eg:
 Autowire - 

beans.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">
    <!--    Tell to spring to scan all annotations; you dont need to configure each annotation Bean postprocessor-->
    <context:annotation-config/>
    <bean id="address" class="com.ibm.spring.core.beans.xml.extensions.annotations.Address">
        <constructor-arg name="city" value="coimbatore"></constructor-arg>
        <constructor-arg name="state" value="Tamil Nadu"/>
    </bean>
    <bean id="customer" class="com.ibm.spring.core.beans.xml.extensions.annotations.Customer">
        <constructor-arg name="id" value="100"/>
        <constructor-arg name="name" value="Subramanian Murugan"/>
    </bean>
</beans>

package com.ibm.spring.core.beans.xml.extensions.annotations;

import org.springframework.beans.factory.annotation.Autowired;

public class Customer {
    private int id;
    private String name;

    @Autowired
    private Address address;

    @Override
    public String toString() {
        return "Customer{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", address=" + address +
                '}';
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Address getAddress() {
        return address;
    }

    public void setAddress(Address address) {
        this.address = address;
    }

    public Customer(int id, String name, Address address) {
        this.id = id;
        this.name = name;
        this.address = address;
    }
}

package com.ibm.spring.core.beans.xml.extensions.annotations;

public class Address {
    private String city;
    private String state;

    public Address() {
    }

    public Address(String city, String state) {
        this.city = city;
        this.state = state;
    }

    @Override
    public String toString() {
        return "Address{" +
                "city='" + city + '\'' +
                ", state='" + state + '\'' +
                '}';
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }
}
package com.ibm.spring.core.beans.xml.extensions.annotations;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class AutowiredMain {
    public static void main(String[] args) {
        ApplicationContext context=new ClassPathXmlApplicationContext("beans.xml");
        Customer customer =context.getBean(Customer.class);
        System.out.println(customer);

    }
}

...................................................................................
				Bean Life Cycles and annoatations

in order to add life cycle annotations which is not part of spring core which is part of jsr 250. we need to add separate depedency.

pom.xml
  <dependency>
            <groupId>javax.annotation</groupId>
            <artifactId>javax.annotation-api</artifactId>
            <version>1.3.2</version>
   </dependency>



beans.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">
    <!--    Tell to spring to scan all annotations; you dont need to configure each annotation Bean postprocessor-->
    <context:annotation-config/>
    <bean id="address" class="com.ibm.spring.core.beans.xml.extensions.annotations.Address">
        <constructor-arg name="city" value="coimbatore"></constructor-arg>
        <constructor-arg name="state" value="Tamil Nadu"/>
    </bean>
    <bean id="customer" class="com.ibm.spring.core.beans.xml.extensions.annotations.Customer">
        <constructor-arg name="id" value="100"/>
        <constructor-arg name="name" value="Subramanian Murugan"/>
    </bean>
</beans>


package com.ibm.spring.core.beans.xml.extensions.annotations;

import org.springframework.beans.factory.annotation.Autowired;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

public class Customer {
    private int id;
    private String name;

    @Autowired
    private Address address;

    @PostConstruct
    public void init() {
        System.out.println("init");
    }

    @PreDestroy
    public void destroy() {
        System.out.println("destroy");
    }

    @Override
    public String toString() {
        return "Customer{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", address=" + address +
                '}';
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Address getAddress() {
        return address;
    }

    public void setAddress(Address address) {
        this.address = address;
    }

    public Customer(int id, String name, Address address) {
        this.id = id;
        this.name = name;
        this.address = address;
    }
}

package com.ibm.spring.core.beans.xml.extensions.annotations;

import org.springframework.context.ApplicationContext;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class AutowiredMain {
    public static void main(String[] args) {
        ConfigurableApplicationContext context=new ClassPathXmlApplicationContext("beans.xml");
        Customer customer =context.getBean(Customer.class);
        System.out.println(customer);
        context.registerShutdownHook();

    }
}
.....................................................................................
			How to reduce code slowly via annotations
.....................................................................................
Types of Annotations
.....................................................................................

1.JSR 250 annoations

@PostConstruct
@PreDestroy

2.Spring Annoations
@Required,@Autowired......etc...

You have beans.xml with annotation configuration, but still we have bean creating definitions how to remove those areas.

How to remove bean definitions from the beans.xml file

   <bean id="customer" class="com.ibm.spring.app.annotations.Customer">
            <property name="id" value="1"/>
            <property name="name" value="Subramanian"/>
   </bean>

Stereotype Annotations:

Stereotype: "Same type of things but it adds extra behaviour based on context"

@Component

What is Component?

The term coined by Microsoft in 1989.
In Object Oriented System Every thing is Object
The Term object is more general term.

Component is also Object(Bean) in spring context
  ->It is resulable
  ->follows all java bean standards


In java technology:

Bean
 In java Bean is called "java Object Only"

EJB
 It is also java object, which is distributed

Enitity
 It is also java object, which is persitable into fs,networks,rdbms

Bean or Ejb or Entity ==  Object /instance


What is use of @Component?
 ->To eleminate bean definition from beans.xml file

<bean id="customerService"  class="com.ae.spring.service.impl.CustomerServiceImpl"/>



Api doc:

 @Target(value=TYPE)
 @Retention(value=RUNTIME)
 @Documented
 @Indexed
public @interface Component

@Component is class level annotation,declared on the top of class.

Indicates that an annotated class is a "component"
Such classes are considered as candidates for auto-detection when using annotation-based configuration and classpath scanning.

Auto-detection and component scanning:

base package: com.ae.spring

			    com
			     |
			    ae
			     |
                           spring
		    -----------------------------
		   |                            |
                service                        repo
		   |                            |
		 impl                          impl
-------------------------------       -----------------------------
  |               |                   |                          |
CustomerService ProductService     CustomerRepoImpl          ProductRepoImpl
Impl            Impl

@Component      @Component         @Component                @Component


....................................................................................
			Automation - Stereotype Annoation Scanner   ..............................................................................................

Types of SteroTypes:

1.Component  -@Component
2.Service    -@Service
3.Repository -@Repository                === Bean === Object
4.Controller -@Controller
5.RestController -@RestController
			  
How to scan SteroTypes?

 <context:component-scan base-package="com.valtech.spring.beans.automation"/>

This package and its subpackages , scan and creates beans and make it ready.

@Component is a generic stereotype for any Spring-managed component.

@Repository, @Service, and @Controller are specializations of @Component for more specific use cases.

by annotating them with @Repository, @Service, or @Controller instead, your classes are more properly suited for processing by tools or associating with aspects.


beans.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <!--    <bean id="helloService" class="com.ibm.spring.core.beans.annotations.HelloService"/>-->
    <!--    Tell to spring to scan all annotation : you dont need to annotation post processors-->
    <context:annotation-config/>
    <!--    Tell to spring that find all stereo type annotations from the package com.ibm.spring and its
       subpackages
    -->
    <context:component-scan base-package="com.ibm.spring"/>
</beans>

package com.ibm.spring.core.beans.annotations;

import org.springframework.stereotype.Component;

@Component
public class HelloService {

    public String sayHello() {
        return "Hello";
    }
}
package com.ibm.spring.core.beans.annotations;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class HelloAnnotationMain {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
        HelloService helloService = context.getBean(HelloService.class);
        System.out.println(helloService.sayHello());
    }
}
....................................................................................
			Dependency Injection and SteroTypes
.....................................................................................

package com.ibm.spring.core.annotations.streotypes;

import org.springframework.stereotype.Component;

import java.util.List;

@Component
public class ProductService {

    public List<String> findAllProducts(){
        return  List.of("Product1","Product2","Product3");
    }
}
package com.ibm.spring.core.annotations.streotypes;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
public class OrderService {

    //Field Injection: No setter and Getter is necessary
    @Autowired
    private ProductService productService;

    public List<String> findAll() {
        return List.of("order1", "Order2");
    }

    public List<String> getProducts() {
        return productService.findAllProducts();
    }
}

package com.ibm.spring.core.annotations.streotypes;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.core.annotation.Order;

public class ComponentAnnotation {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("beans-annotations-stereo.xml");
        OrderService orderService = context.getBean(OrderService.class);
        System.out.println(orderService.findAll());
        System.out.println(orderService.getProducts());
    }
}
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">
    <!--    Activate all annotations-->
    <context:annotation-config/>
    <!--Enable StroType annotations and create beans accordingly-->
    <context:component-scan base-package="com.ibm.spring.core"/>
</beans>

.....................................................................................				DOMAIN Driven Design
.....................................................................................
 
@Service:

@Target(value=TYPE)
 @Retention(value=RUNTIME)
 @Documented
 @Component
public @interface Service

Indicates that an annotated class is a "Service", originally defined by Domain-Driven Design (Evans, 2003) as "an operation offered as an interface that stands alone in the model, with no encapsulated state."


@Repository:
@Target(value=TYPE)
 @Retention(value=RUNTIME)
 @Documented
 @Component
public @interface Repository

indicates that an annotated class is a "Repository", originally defined by Domain-Driven Design (Evans, 2003) as "a mechanism for encapsulating storage, retrieval, and search behavior which emulates a collection of objects".

...........................................................................................

@Target(value=TYPE)
 @Retention(value=RUNTIME)
 @Documented
 @Component
public @interface Controller
Indicates that an annotated class is a "Controller" (e.g. a web controller).
.....................................................................................
.....................................................................................

eg:
Service 
package com.ibm.spring.core.beans.annotations;

import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

import java.util.List;

//@Component
@Service
public class ProductService {

    public List<String> getProducts() {
        return List.of("p1", "p2", "p3");
    }
}
package com.ibm.spring.core.beans.annotations;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

import java.util.List;

//@Component
@Service
public class OrderService {

    @Autowired
    private ProductService productService;

    public List<String> getProducts() {
        return productService.getProducts();
    }
}
package com.ibm.spring.core.beans.annotations;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class OrderServiceMain {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
        OrderService orderService = context.getBean(OrderService.class);
        System.out.println(orderService.getProducts());

    }
}
.....................................................................................
			 End of Xml Configuration
.....................................................................................
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">
    <!--scanner for common Annotation -->
    <context:annotation-config/>
    <!--    Scanner for StreoType Annotations-->
    <context:component-scan base-package="com.valtech.spring.beans.automation"/>
</beans>
.....................................................................................			What if i want to remove this beans.xml itself
			    Java Config
.....................................................................................

What is Java Config?

JavaConfig <=======> beans.xml
  but it is pure java Program.

Why Java config?
  Java Config was introduced to remove XML,

The XML is outside spring.
Spring need to parse xml file and construct objects accordingly
Which is heavy weight.
Spring introduced new configuration system which is written in java itself.
.....................................................................................

Java Configuration:

1.Bean declaration : @Component/@Service/@Repository/@Controller

package com.ibm.spring.core.javaconfig;

import org.springframework.stereotype.Component;

@Component
public class Hello {
    public String sayHello() {
        return "Hello";
    }
}

2.Configuration 
  In old we wrote beans.xml
  Now we dont need beans.xml

Java Configuration:
package com.ibm.spring.core.javaconfig;

package com.ibm.spring.core.javaconfig;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration  //beans
public class AppConfig {

    //<bean id="hello" class="com.ibm.spring.core.javaconfig.Hello"/>
    @Bean
    public Hello createHello() {
        return new Hello();
    }

}

Main: AnnotationConfigApplicationContext(AppConfig.class);

package com.ibm.spring.core.javaconfig;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class JavaConfigMain {
    public static void main(String[] args) {
        ApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);
        Hello hello = context.getBean(Hello.class);
        System.out.println(hello.sayHello());
    }
}

....................................................................................
			 Dependency Injection
.....................................................................................
package com.ibm.spring.core.javaconfig;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class OrderService {

    @Autowired
    private CustomerService customerService;

    public String getCustomer() {
        return customerService.getCustomer();
    }
}
package com.ibm.spring.core.javaconfig;

import org.springframework.stereotype.Service;

@Service
public class CustomerService {

    public String getCustomer() {
        return "Customer!!!";
    }
}
package com.ibm.spring.core.javaconfig;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration  //beans
public class AppConfig {

    //<bean id="hello" class="com.ibm.spring.core.javaconfig.Hello"/>
    @Bean
    public Hello createHello() {
        return new Hello();
    }

    @Bean
    public CustomerService createCustomer() {
        return new CustomerService();
    }

    @Bean
    public OrderService createOrderService() {
        return new OrderService();
    }
}
package com.ibm.spring.core.javaconfig;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class JavaConfigDependencyInjection {
    public static void main(String[] args) {
        ApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);
        OrderService orderService = context.getBean(OrderService.class);
        System.out.println(orderService.getCustomer());
    }
}
..........................................................................................
			Modularity and configuration

Instead of creating/mapping beans in one single place "AppConfig" going to be complex, we can break configurations into multiple configs, then latter we can combine into single config.


modular definition files

1.XML is so complex to maintain when app grows.
   -In general we can have multiple configurations
  like
	projectname-dao.xml
	cleartrip.dao.xml 
        cleartrip.service.xml
        cleartrip.entitis.xml
	cleartrip.beans.xml
via Program:
ConfigurableApplicationContext context = ClassPathXmlApplicationContext("bank-app.xml","account-repo.xml");

or
ConfigurableApplicationContext context = new ClassPathXmlApplicationContext
new String[] { "bank-app.xml", "account-repo.xml" });

How to break the configuration in annotations? in Java config

customer
 @Configuration
 class  CustomerConfig {
   ///customer beans
 }

order
@Configuration
 class  OrderConfig {
   ///customer beans
 }
accounts
@Configuration
 class  AccountsConfig {
   ///customer beans
 }
.............................................................................................
.....................................................................................
			Modularity and configuration

Instead of creating/mapping beans in one single place "AppConfig" going to be complex, we can break configurations into multiple configs, then latter we can combine into single config.


modular definition files

1.XML is so complex to maintain when app grows.
   -In general we can have multiple configurations
  like
	projectname-dao.xml
	cleartrip.dao.xml 
        cleartrip.service.xml
        cleartrip.entitis.xml
	cleartrip.beans.xml
via Program:
ConfigurableApplicationContext context = ClassPathXmlApplicationContext("bank-app.xml","account-repo.xml");

or
ConfigurableApplicationContext context = new ClassPathXmlApplicationContext
new String[] { "bank-app.xml", "account-repo.xml" });

How to break the configuration in annotations?

customer
 @Configuration
 class  CustomerConfig {
   ///customer beans
 }

order
@Configuration
 class  OrderConfig {
   ///customer beans
 }
accounts
@Configuration
 class  AccountsConfig {
   ///customer beans
 }
............

Eg:
package com.ibm.spring.core.javaconfig;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class HelloConfig {

    @Bean
    public  Hello createHello(){
        return  new Hello();
    }
}

package com.ibm.spring.core.javaconfig;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class CustomerConfig {
    @Bean
    public  CustomerService createCustomerService(){
        return  new CustomerService();
    }
}

package com.ibm.spring.core.javaconfig;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class OrderConfig {

    @Bean
    public OrderService createOrderService() {
        return new OrderService();
    }
}
package com.ibm.spring.core.javaconfig;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;

@Configuration  //beans
@Import({HelloConfig.class, CustomerConfig.class, OrderConfig.class})
public class AppConfig {}

package com.ibm.spring.core.javaconfig;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class JavaConfigDependencyInjection {
    public static void main(String[] args) {
        ApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);
        OrderService orderService = context.getBean(OrderService.class);
        System.out.println(orderService.getCustomer());
    }
}
.....................................................................................
		How to remove bean creations from the java config
....................................................................................
@Component-scan === beans.xml <context:component-scan base-package="com.ibm.spring">


Note:
 Please disable all any code which is written to create beans automatically.
Note:
 create new Project 

package com.ibm.spring.core.javaconfig;

import org.springframework.stereotype.Service;

@Service
public class HelloService {
    public String sayHello() {
        return "Hello";
    }
}

package com.ibm.spring.core.javaconfig;

import org.springframework.context.annotation.ComponentScan;

@ComponentScan(basePackages = "com.ibm.spring.core")
public class AppConfig {

}
package com.ibm.spring.core.javaconfig;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class JavaConfigMain {
    public static void main(String[] args) {
        ApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);
        HelloService helloService = context.getBean(HelloService.class);
        System.out.println(helloService.sayHello());
    }
}
.....................................................................................
		        Auto Configuration
 
Spring allows us automatically configure your spring application based on bean definitions in the "class path"

How to opt-in auto configuration?

@EnableAutoConfiguration or @SpringBootApplication.


Enable auto-configuration of the Spring Application Context, attempting to guess and configure beans that you are likely to need. 
Auto-configuration classes are usually applied based on your classpath and what beans you have defined.
...................................................................................
		@EnableAutoconfiguration vs @ComponentScan
....................................................................................

@ComponentScan scans for annotated spring components
@EnbaleAutoConfiguration is used to enable the auto-configuration

The main diffence between these annoations is that @ComponentScan scans for spring components while @EnableAutoConfiguration is used for auto-configuring beans present in the class path.

Advanced @EnableAutoConfiguration, will lead new Configuration system

			"Spring Boot"
.....................................................................................
.....................................................................................
			 Getting started with Spring Boot Architecture
....................................................................................

What is Spring Boot?

  Spring Boot is configuration system, this configure beans auotmatically without using any explicit/external configurations defined by developer.

 auto-configuration attempts to automatically configure your Spring application based on the "jar dependencies" that you have added

 Spring Boot is going to initalize the beans , not only in the application but also in the jar files.

 You are going to create spring application, which uses the following features

 1.web 
 2.database
 3.logging
 4.caching

for ex, i want to connect to database called mysql, i need to configure datasources,connection informations,transactions, hibernate and jpa configurations...
In the bean defintions..
  But in Spring 5.x autoconfiguration helps to configure spring app in easy way based on "opinions" such i want database,i want to build webservice, i want to enable logging, i want to enable caching, i want to enable SomeXXX...

if i want, add that jar in the class path, spring prvoides most of the common settings to kick start app as quick as possible.

 Spring team, created a separate project based on "auto configuration" , that is called "Spring Boot".

Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can "just run".

We take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need minimal Spring configuration.


Spring Boot Focus Mainly Configuration

1.Build Configuration - lib configuration -pom.xml
2.Application Configuration - Beans and spring managed components-services,repositories

..................................................................................

Why Spring Boot?

Spring Boot  starters reduces build dependency - POM Dependencies/project dependencies  AutoConfigrator reduces the AppDepedency

1.Create stand-alone Spring applications
   You can deploy apps in containers,cloud.....easily

2.Embeded Tomcat, Jetty or Undertow directly (no need to deploy WAR files)
   Spring boots provides execuatble jar / fat jar /uber jar.	

3.Provide opinionated 'starter' dependencies to simplify your build configuration
     Looks like profie based configuration which is applied even for pom dependencies

4.Automatically configure Spring and 3rd party libraries whenever possible
    Via autoconfiguration and class path scanning.

Provide production-ready features such as metrics, health checks, and externalized configuration

How to begin with spring boot application?

YOu can create standalone spring boot app 
YOu can create web spring boot app


Create new maven project.

pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.3.0</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.ibm</groupId>
    <artifactId>SpringBootStandAloneApp</artifactId>
    <version>1.0-SNAPSHOT</version>
    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>

package com.ibm.spring.boot;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ConfigurableApplicationContext;

@SpringBootApplication
public class SpringBootAppMain {
    public static void main(String[] args) {
        ConfigurableApplicationContext context = SpringApplication.run(SpringBootAppMain.class);
    }
}

After Running:
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.3.0)

2024-06-20T11:38:55.669+05:30  INFO 18916 --- [           main] com.ibm.spring.boot.SpringBootAppMain    : Starting SpringBootAppMain using Java 17.0.10 with PID 18916 (G:\IBM\2024\June\Spring\SpringBootStandAloneApp\target\classes started by subu in G:\IBM\2024\June\Spring\SpringBootStandAloneApp)
2024-06-20T11:38:55.674+05:30  INFO 18916 --- [           main] com.ibm.spring.boot.SpringBootAppMain    : No active profile set, falling back to 1 default profile: "default"
2024-06-20T11:38:56.596+05:30  INFO 18916 --- [           main] com.ibm.spring.boot.SpringBootAppMain    : Started SpringBootAppMain in 1.63 seconds (process running for 2.251)

....................................................................................
				AutoConfiguration
....................................................................................

Configuration is based on config meta data provied in "META-INF/spring.factories"

org.springframework.boot.spring-autoconfigure.3.3.0

spring.factories 
  It is meta configuration file read by spring container to create objects/beans based on certain conditions -rules


Spring container scans spring.factories file , starts loading configuration, which apples @condtional annotations.

  Container------|AppConfig----|spring.factories----starts initalizing beans/configurations/components   based on rules(conditions) => Spring Boot.


additional-spring-configuration-metadata.json

  {
      "name": "server.port",
      "defaultValue": 8080
    }


Annotations are processed by ASM - java bytecode engineering lib.
https://asm.ow2.io/

.....................................................................................
			  How opinioned app development works
			    (Conditional Bean Creations)
...................................................................................


   When building a spring boot app, we sometimes want to only load beans or modules(configurations) into the application context(container) if some conditions met, Be it disable some beans during tests, or react to a certain property in the runtime env.


eg:

 Some beans work in test env, the same bean i dont want in production env.
 enable or disable some certain cross cutting concerns.
  eg:
    we have built a module that configures security, during dev test, we dont want to have username and passwords every time. so i want to disable the whole security module in local tests.
 
 if some external resources is available without which they cant work. 
   for eg: my application should not work if there is no logback.xml file has been found on classpath.

- if beans does not exits  / exits
- if module does not exits / exits
- if external does not exits  / exits

Declaring Conditional Bean:
..........................
In application, you can declare bean any where, optionaly we can add condition.

only if this condition is satisifed will the bean added to the application context




eg:

@Configuration
class MyBeanConfig {

 @Conditional(...)
 @Bean
 public MyBean  getBean(){ 
       return new MyBean()
 }

}

Module Level

@Configuration
@Conditional(...)
class MyBeanConfig {

 @Bean
 public MyBean  getBean(){ 
       return new MyBean()
 }

}

Component Level

@Component
@Conditional(...)
class MyComponent {

 
}
.....................................................................................
........................................................................................................

PreDefined Conditions:
......................
1.ConditionalOnProperty 
   Loads beans based on env property - application.properties
2.ConditionalOnExpression
3.ConditionalOnBean
4.ConditionalOnMissingBean
5.ConditionalOnResource
6.ConditionalOnClass
7.ConditionalOnJava -  version based

etc..
custom conditions
Boolean Operators
Or
And


ConditionalBean:

-OnBean - The bean if  threre , what should i do

eg:
if Mysql dependency (driver jar) in the build path
     -Create Datasource Object
           -Add properties - connection string - url,password,userName


-OnMissing -Then bean if not there ,what should i do
  if web missing, then start console container

https://reflectoring.io/spring-boot-conditionals/

Implmentation: Conditional:
............................
Implmentation: Conditional:
............................
package com.ibm.springbootbasics.config;

public class OptionalBean {
    public OptionalBean() {
        System.out.println("Optional Bean");
    }
}
package com.ibm.springbootbasics.config;

public class DependantBean {
    public DependantBean() {
        System.out.println("Dependant Bean is ready!");
    }
}
package com.ibm.springbootbasics.config;

import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class DependantBeanConfig {

    @Bean
    public OptionalBean optionalBean() {
        return new OptionalBean();
    }

    @Bean
    //@ConditionalOnMissingBean(OptionalBean.class)
    @ConditionalOnBean(OptionalBean.class)
    //create this bean(DependantBean only if  Optional Bean is Avaliable, if not dont create
    public DependantBean dependantBean() {
        return new DependantBean();
    }


}
package com.ibm.springbootbasics;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SpringbootbasicsApplication {

	public static void main(String[] args) {
		SpringApplication.run(SpringbootbasicsApplication.class, args);
	}

}
package com.valtech.bootapp.conditionalonclass;

public class RequiredClass {
}
package com.valtech.bootapp.conditionalonclass;

import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
//@ConditionalOnClass(name = "com.valtech.bootapp.conditionalonclass.RequiredClass2")
public class SpringConfig {

    @Bean
    //@ConditionalOnClass(value = RequiredClass.class)
//    @ConditionalOnClass(name = "com.valtech.bootapp.conditionalonclass.RequiredClass")
    public MyClass getMyClass() {
        return new MyClass();
    }
    @Bean
    //@ConditionalOnClass(value = RequiredClass.class)
//    @ConditionalOnMissingClass("com.valtech.bootapp.conditionalonclass.RequiredClass1")
    public MyClass getMyClassMissing() {
        return new MyClass("Missing Class");
    }

    public static class MyClass {

        public MyClass(String message) {
            System.out.println(message);
        }

        public MyClass() {
            System.out.println("MyClass");
        }
    }
}


Conditional Componnent:

@Component
@ConditionalXXX
public class MyComponent{}

@ConditionalOnProperty("value.endabled",havingValue="true",matchIfMissing=true)
@Configuration
public class CrossCuttingModule{

}
				......................................................................................			@SpringBootApplication
.....................................................................................

@SpringBootConfiguration
@EnableAutoConfiguration
@ComponentScan
@SpringBootApplication

package com.ibm;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.SpringBootConfiguration;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.ComponentScan;

@SpringBootApplication
//@SpringBootConfiguration
//@EnableAutoConfiguration
//@ComponentScan
public class MyspringbootApplication {

	public static void main(String[] args) {
		SpringApplication.run(MyspringbootApplication.class, args);
	}

}
Configuration   ------> Bean Creations - <bean>
@@SpringBootConfiguration

@EnableAutoConfiguration

 -Tells Spring boot to guess how you  want to configure spring,based on the jar dependencies that you have addeded

-IT auto configures the beans that are present in the class path.

 This simplifies the developer work by guuessing the required beans from the class path and configures to run the application.

-for eg, H2 is on your class path, you have not manually configured any database connection beans, then spring will auto configure an in memory database.


@ComponentScan
 Tells spring to look for other components,configurations and all services in the specificied package.
Spring is able to auto scan,detect  and register your beans or components from predefined project package.
if no package is specified current class package is taken as the root package.
.....................................................................................
.....................................................................................
			  Bean creations in Spring Boot
.....................................................................................

Streotypes:

package com.ibm.spring.boot.beans;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class HelloService {

    @Autowired
    private GreeterService greeterService;

    public String sayHello() {
        return greeterService.sayGreet();
    }
}
package com.ibm.spring.boot.beans;

import org.springframework.stereotype.Service;

@Service
public class GreeterService {

    public String sayGreet(){
        return "Greet";
    }
}
package com.ibm.spring.boot.beans;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ConfigurableApplicationContext;

@SpringBootApplication
public class SpringBeanDI {
    public static void main(String[] args) {
        ConfigurableApplicationContext context= SpringApplication.run(SpringBeanDI.class);
        HelloService helloService= context.getBean(HelloService.class);
        System.out.println(helloService.sayHello());

    }
}
....................................................................................
			pojo beans - application beans
...................................................................................

Beans can be created inside @Configuration classes and also you can create any where with scope of @SpringBootApplication annotation.

With COnfiguration:
package com.ibm.spring.boot.beans;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class AppConfig {

    @Bean
    public Customer customer() {
        return new Customer(1,"Subramanian");
    }

    @Bean
    public Address address() {
        return new Address("coimbatore");
    }
}

Inside another class /main class
package com.ibm.spring.boot.beans;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.annotation.Bean;

@SpringBootApplication
public class SpringBeanDI {
    public static void main(String[] args) {
        ConfigurableApplicationContext context = SpringApplication.run(SpringBeanDI.class);
        Customer customer = context.getBean(Customer.class);
        System.out.println(customer);

    }

    @Bean
    public Customer customer() {
        return new Customer(1, "Subramanian");
    }

    @Bean
    public Address address() {
        return new Address("coimbatore");
    }
}
package com.ibm.spring.boot.beans;

import org.springframework.beans.factory.annotation.Autowired;

public class Customer {
    private int id;
    private String name;
    @Autowired
    private Address address;

    public Customer() {
    }

    public Customer(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    @Override
    public String toString() {
        return "Customer{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", address=" + address +
                '}';
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Address getAddress() {
        return address;
    }

    public void setAddress(Address address) {
        this.address = address;
    }
}
package com.ibm.spring.boot.beans;

public class Address {
    private  String city;

    public Address() {
    }

    public Address(String city) {
        this.city = city;
    }

    public String getCity() {
        return city;
    }

    @Override
    public String toString() {
        return "Address{" +
                "city='" + city + '\'' +
                '}';
    }

    public void setCity(String city) {
        this.city = city;
    }
}
.....................................................................................
		Command Line Runner Interface
....................................................................................

CommandLineRunner interface is used to initalize the some data during app start up,
which is similar to "Life Cycle Hooks" in Bean...
CommandLineRunner is not part of any bean, rather part of whole app.


Use Cases:

1.Data base mock data initalization

Example:

There are two ways

1.Via interface implementations like tradtional OO style
2.via Functional programming..


Interface Implementation:
..........................

1.Write a separate class and implement interface...
package com.ibm.spring.boot.clr;

import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

@Component
public class Initializer implements CommandLineRunner {
    @Override
    public void run(String... args) throws Exception {
        System.out.println("init...");
    }
}
package com.ibm.spring.boot.clr;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ConfigurableApplicationContext;

@SpringBootApplication
public class Main {
    public static void main(String[] args) {
        ConfigurableApplicationContext context = SpringApplication.run(com.ibm.spring.boot.SpringBootAppMain.class);
    }
}

2.implement interface as part of main class.
package com.ibm.spring.boot.clr;

import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ConfigurableApplicationContext;

@SpringBootApplication
public class CLRMain implements CommandLineRunner {
    public static void main(String[] args) {
        ConfigurableApplicationContext context = SpringApplication.run(CLRMain.class);
    }

    @Override
    public void run(String... args) throws Exception {
        System.out.println("new init");
    }
}
....................................................................................
			 Functional style
....................................................................................

